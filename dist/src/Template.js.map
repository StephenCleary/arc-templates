{"version":3,"sources":["Template.js"],"names":[],"mappings":"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","file":"Template.js","sourcesContent":["import Lexer from './Lexer';\r\nimport Context from './Context';\r\nimport tokens from './tokens';\r\n\r\nconst MISSING_FILENAME = '<string>';\r\nconst globalEval = eval;\r\n\r\nfunction nameOrExpression(token, defaultIfEmpty) {\r\n    let value = token.value.trim();\r\n    if (value === '') {\r\n        if (defaultIfEmpty !== undefined) {\r\n            value = defaultIfEmpty;\r\n        } else {\r\n            throw new Error(token.begin + ': ' + token.token + ' tag must contain a name or expression.');\r\n        }\r\n    }\r\n    return value.startsWith('(') ? value : JSON.stringify(value);\r\n}\r\n\r\nfunction compile(text, filename) {\r\n    const lexer = new Lexer(text, filename);\r\n    const buffer = ['with (this._locals) with (this.data) {\\n'];\r\n    for (let token of lexer.lex()) {\r\n        switch (token.token) {\r\n            case tokens.DOCUMENT:\r\n                buffer.push('this._appendRaw(' + JSON.stringify(token.value) + ');\\n');\r\n                break;\r\n            case tokens.EXPRESSION:\r\n                buffer.push('this._append(' + token.value + ');\\n');\r\n                break;\r\n            case tokens.JAVASCRIPT:\r\n                buffer.push(token.value + ';\\n');\r\n                break;\r\n            case tokens.LAYOUT:\r\n                buffer.push('this._layout = ' + nameOrExpression(token) + ';\\n');\r\n                break;\r\n            case tokens.BLOCK_REFERENCE:\r\n                buffer.push('this._appendRaw(this.child[' + nameOrExpression(token, 'content') + '] || \"\");\\n');\r\n                break;\r\n            case tokens.BLOCK_NAME:\r\n                buffer.push('this._currentBlock = ' + nameOrExpression(token) + ';\\n');\r\n                break;\r\n            case tokens.PARTIAL:\r\n                buffer.push('this.partial = this._locals.partial = yield this._partial(' + nameOrExpression(token) + ');\\n');\r\n                buffer.push('this._appendRaw(this._locals.partial.content);\\n');\r\n                break;\r\n            default:\r\n                throw new Error(\"Internal error.\");\r\n        }\r\n    }\r\n    buffer.push('}');\r\n    return buffer.join('');\r\n}\r\n\r\nclass Template {\r\n    constructor(arc) {\r\n        this.arc = arc;\r\n    }\r\n\r\n    get filename() {\r\n        return this._filename || MISSING_FILENAME;\r\n    }\r\n    set filename(value) {\r\n        this._filename = value;\r\n    }\r\n\r\n    load() {\r\n        if (this.text !== undefined) {\r\n            return Promise.resolve(this.text);\r\n        } else {\r\n            return this.arc.filesystem.readFile(this.filename).then(text => this.text = text);\r\n        }\r\n    }\r\n\r\n    compile() {\r\n        return this.load().then(text => {\r\n            // As much as I dislike eval, GeneratorFunction doesn't seem to be working yet.\r\n            const func = globalEval('(function *() { ' + compile(text, this.filename) + ' })');\r\n            const context = new Context(this, func, this.filename);\r\n            return context._execute.bind(context);\r\n        });\r\n    }\r\n\r\n    evaluate(data, child) {\r\n        return this.compile().then(execute => execute(data, child));\r\n    }\r\n\r\n    joinedPath(path) {\r\n        if (this.filename === MISSING_FILENAME) {\r\n            return path;\r\n        }\r\n        return this.arc.path.join(this.arc.path.dirname(this.filename), path);\r\n    }\r\n\r\n    static fromFile(arc, filename) {\r\n        const result = new Template(arc);\r\n        result.filename = filename;\r\n        return result;\r\n    }\r\n\r\n    static fromString(arc, text, filename) {\r\n        const result = new Template(arc);\r\n        result.text = text;\r\n        result.filename = filename;\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Template;"],"sourceRoot":"/source/"}