{"version":3,"sources":["Compiler.js"],"names":[],"mappings":"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","file":"Compiler.js","sourcesContent":["import Lexer from './Lexer';\r\nimport Template from './Template';\r\nimport tokens from './tokens';\r\n\r\nconst MISSING_FILENAME = '<string>';\r\nconst globalEval = eval;\r\n\r\nclass Compiler {\r\n    constructor(arc, filename, data, child) {\r\n        this.arc = arc;\r\n        this.filename = filename || MISSING_FILENAME;\r\n        this.data = data;\r\n        this.child = child;\r\n    }\r\n\r\n    nameOrExpression(token, defaultIfEmpty) {\r\n        let value = token.value.trim();\r\n        if (value === '') {\r\n            if (defaultIfEmpty !== undefined) {\r\n                value = defaultIfEmpty;\r\n            } else {\r\n                throw new Error(token.begin + ': ' + token.token + ' tag must contain a name or expression.');\r\n            }\r\n        }\r\n        return value.startsWith('(') ? value : JSON.stringify(value);\r\n    }\r\n\r\n    compile(text) {\r\n        const lexer = new Lexer(text, this.filename);\r\n        const buffer = ['with (this._locals) with (this.data) {\\n'];\r\n        for (let token of lexer.lex()) {\r\n            switch (token.token) {\r\n                case tokens.DOCUMENT:\r\n                    buffer.push('this._appendRaw(' + JSON.stringify(token.value) + ');\\n');\r\n                    break;\r\n                case tokens.EXPRESSION:\r\n                    buffer.push('this._append(' + token.value + ');\\n');\r\n                    break;\r\n                case tokens.JAVASCRIPT:\r\n                    buffer.push(token.value + ';\\n');\r\n                    break;\r\n                case tokens.LAYOUT:\r\n                    buffer.push('this._layout = ' + this.nameOrExpression(token) + ';\\n');\r\n                    break;\r\n                case tokens.BLOCK_REFERENCE:\r\n                    buffer.push('this._appendRaw(this.child[' + this.nameOrExpression(token, 'content') + '] || \"\");\\n');\r\n                    break;\r\n                case tokens.BLOCK_NAME:\r\n                    buffer.push('this._currentBlock = ' + this.nameOrExpression(token) + ';\\n');\r\n                    break;\r\n                case tokens.PARTIAL:\r\n                    buffer.push('this.partial = this._locals.partial = yield this._partial(' + this.nameOrExpression(token) + ');\\n');\r\n                    buffer.push('this._appendRaw(this._locals.partial.content);\\n');\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Internal error.\");\r\n            }\r\n        }\r\n        buffer.push('}');\r\n        return buffer.join('');\r\n    }\r\n\r\n    parse(text) {\r\n        // As much as I dislike eval, GeneratorFunction doesn't seem to be working yet.\r\n        const func = globalEval('(function *() { ' + this.compile(text) + ' })');\r\n        const template = new Template(this, func, this.data, this.child);\r\n        return template._execute();\r\n    }\r\n\r\n    load() {\r\n        return this.arc.filesystem.readFile(this.filename).then(text => this.parse(text, this.data, this.child));\r\n    }\r\n\r\n    joinedPath(path) {\r\n        if (this.filename === MISSING_FILENAME) {\r\n            return path;\r\n        }\r\n        return this.arc.path.join(this.arc.path.dirname(this.filename), path);\r\n    }\r\n}\r\n\r\nexport default Compiler;"],"sourceRoot":"/source/"}