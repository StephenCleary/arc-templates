{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;;;sBAAc,QAAQ;;;;2BACD,gBAAgB;;;;iCACV,sBAAsB;;;;2BAC5B,gBAAgB;;;;sBAClB,QAAQ;;;;AAE3B,IAAM,UAAU,GAAG,oBAAO,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC7D,IAAM,OAAO,GAAG,UAAU,GAAG,SAAQ,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,GAAG,SAAQ,OAAO,EAAE,CAAC;;IAE3F,GAAG;AACM,aADT,GAAG,CACO,OAAO,EAAE;8BADnB,GAAG;;AAED,eAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,YAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,oCAAoB,CAAC;AAC7D,YAAI,CAAC,IAAI,GAAG,OAAO,CAAC,UAAU,IAAI,8BAAc,CAAC;AACjD,YAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,oBAAE,MAAM,CAAC;AACzC,YAAI,CAAC,UAAU,GAAG,UAAU,CAAC;KAChC;;iBAPC,GAAG;;eASS,wBAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE;;;AACjC,mBAAO,OAAO,CAAC,IAAI,CAAC;uBAAM,yBAAS,UAAU,QAAO,IAAI,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;aAAA,CAAC,CAAC;SACvF;;;eAEW,sBAAC,QAAQ,EAAE,IAAI,EAAE;;;AACzB,mBAAO,OAAO,CAAC,IAAI,CAAC;uBAAM,yBAAS,QAAQ,SAAO,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;aAAA,CAAC,CAAC;SAC/E;;;eAEY,uBAAC,IAAI,EAAE,QAAQ,EAAE;;;AAC1B,mBAAO,OAAO,CAAC,IAAI,CAAC;uBAAM,yBAAS,UAAU,SAAO,IAAI,EAAE,QAAQ,CAAC,CAAC,OAAO,EAAE;aAAA,CAAC,CAAC;SAClF;;;eAEU,qBAAC,QAAQ,EAAE;;;AAClB,mBAAO,OAAO,CAAC,IAAI,CAAC;uBAAM,yBAAS,QAAQ,SAAO,QAAQ,CAAC,CAAC,OAAO,EAAE;aAAA,CAAC,CAAC;SAC1E;;;WAvBC,GAAG;;;qBA0BM,GAAG","file":"index.js","sourcesContent":["import _ from 'lodash';\r\nimport Template from './src/Template';\r\nimport NodeFilesystem from './src/NodeFilesystem';\r\nimport NodePath from './src/NodePath';\r\nimport semver from 'semver';\r\n\r\nconst supportES5 = semver.lt(process.versions.node, '4.0.0');\r\nconst preload = supportES5 ? Promise.resolve(require('babel-core/polyfill')) : Promise.resolve();\r\n\r\nclass Arc {\r\n    constructor(options) {\r\n        options = options || {};\r\n        this.filesystem = options.filesystem || new NodeFilesystem();\r\n        this.path = options.pathsystem || new NodePath();\r\n        this.escape = options.escape || _.escape;\r\n        this.supportES5 = supportES5;\r\n    }\r\n\r\n    evaluateString(text, data, filename) {\r\n        return preload.then(() => Template.fromString(this, text, filename).evaluate(data));\r\n    }\r\n\r\n    evaluateFile(filename, data) {\r\n        return preload.then(() => Template.fromFile(this, filename).evaluate(data));\r\n    }\r\n\r\n    compileString(text, filename) {\r\n        return preload.then(() => Template.fromString(this, text, filename).compile());\r\n    }\r\n\r\n    compileFile(filename) {\r\n        return preload.then(() => Template.fromFile(this, filename).compile());\r\n    }\r\n}\r\n\r\nexport default Arc;"],"sourceRoot":"/source/"}