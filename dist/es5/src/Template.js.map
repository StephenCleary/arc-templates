{"version":3,"sources":["Template.js"],"names":[],"mappings":"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","file":"Template.js","sourcesContent":["import Lexer from './Lexer';\r\nimport Context from './Context';\r\nimport tokens from './tokens';\r\nimport Promise from 'bluebird';\r\nimport { transform } from 'babel-core';\r\n\r\nconst MISSING_FILENAME = '<string>';\r\nconst globalEval = eval;\r\n\r\nfunction nameOrExpression(token, defaultIfEmpty) {\r\n    let value = token.value.trim();\r\n    if (value === '') {\r\n        if (defaultIfEmpty !== undefined) {\r\n            value = defaultIfEmpty;\r\n        } else {\r\n            throw new Error(token.begin + ': ' + token.token + ' tag must contain a name or expression.');\r\n        }\r\n    }\r\n    return value.startsWith('(') ? value : JSON.stringify(value);\r\n}\r\n\r\nfunction compile(text, filename) {\r\n    const lexer = new Lexer(text, filename);\r\n    const buffer = [];\r\n    for (let token of lexer.lex()) {\r\n        switch (token.token) {\r\n            case tokens.DOCUMENT:\r\n                buffer.push('this._appendRaw(' + JSON.stringify(token.value) + ');');\r\n                break;\r\n            case tokens.EXPRESSION:\r\n                buffer.push('this._append(' + token.value + ');');\r\n                break;\r\n            case tokens.JAVASCRIPT:\r\n                buffer.push(token.value + ';');\r\n                break;\r\n            case tokens.LAYOUT:\r\n                buffer.push('this._layout = ' + nameOrExpression(token) + ';');\r\n                break;\r\n            case tokens.BLOCK_REFERENCE:\r\n                buffer.push('this._appendRaw(this.child[' + nameOrExpression(token, 'content') + '] || \"\");');\r\n                break;\r\n            case tokens.BLOCK_NAME:\r\n                buffer.push('this._currentBlock = ' + nameOrExpression(token) + ';');\r\n                break;\r\n            case tokens.PARTIAL:\r\n                buffer.push('this.partial = this._locals.partial = yield this._partial(' + nameOrExpression(token) + ');');\r\n                buffer.push('this._appendRaw(this._locals.partial.content);');\r\n                break;\r\n            default:\r\n                throw new Error(\"Internal error.\");\r\n        }\r\n    }\r\n    return buffer.join('\\n');\r\n}\r\n\r\nclass Template {\r\n    constructor(arc) {\r\n        this.arc = arc;\r\n    }\r\n\r\n    get filename() {\r\n        return this._filename || MISSING_FILENAME;\r\n    }\r\n    set filename(value) {\r\n        this._filename = value;\r\n    }\r\n\r\n    load() {\r\n        if (this.text !== undefined) {\r\n            return Promise.resolve(this.text);\r\n        } else {\r\n            return this.arc.filesystem.readFile(this.filename).then(text => this.text = text);\r\n        }\r\n    }\r\n\r\n    compile() {\r\n        return this.load().then(text => {\r\n            // As much as I dislike eval, GeneratorFunction.constructor isn't working yet for Node *or* Babel.\r\n\r\n            // The awkward extra function wrapper for ES5 is required because Babel does not yet support 'with' statements within generator functions.\r\n            const funcText = this.arc.supportES5 ?\r\n                '(function () { with (this._locals) with (this.data) { return (function *() {\\n' + compile(text, this.filename) + '\\n}).bind(this); } })' :\r\n                '(function *() { with (this._locals) with (this.data) {\\n' + compile(text, this.filename) + '\\n} })';\r\n\r\n            // We also Babel-transform for modern Node versions because it doesn't yet support block scoping (const, let, etc) outside of strict mode (as of 2015-10-07).\r\n            // Ideally, for modern Node, this should just be: globalEval(funcText)\r\n            const func = this.arc.supportES5 ?\r\n                globalEval(transform(funcText, { blacklist: ['strict'] }).code) :\r\n                globalEval(transform(funcText, { whitelist: ['es6.blockScoping'] }).code);\r\n            const context = new Context(this, func, this.filename);\r\n            return context._execute.bind(context);\r\n        });\r\n    }\r\n\r\n    evaluate(data, child) {\r\n        return this.compile().then(execute => execute(data, child));\r\n    }\r\n\r\n    joinedPath(path) {\r\n        if (this.filename === MISSING_FILENAME) {\r\n            return path;\r\n        }\r\n        return this.arc.path.join(this.arc.path.dirname(this.filename), path);\r\n    }\r\n\r\n    static fromFile(arc, filename) {\r\n        const result = new Template(arc);\r\n        result.filename = filename;\r\n        return result;\r\n    }\r\n\r\n    static fromString(arc, text, filename) {\r\n        const result = new Template(arc);\r\n        result.text = text;\r\n        result.filename = filename;\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Template;"],"sourceRoot":"/source/"}