{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;sBAAc,QAAQ;;;;2BACD,gBAAgB;;;;iCACV,sBAAsB;;;;2BAC5B,gBAAgB;;;;sBAClB,QAAQ;;;;AAE3B,MAAM,UAAU,GAAG,iBAAO,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC7D,MAAM,OAAO,GAAG,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;;AAEjG,MAAM,GAAG,CAAC;AACN,eAAW,CAAC,OAAO,EAAE;AACjB,eAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,YAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,iCAAoB,CAAC;AAC7D,YAAI,CAAC,IAAI,GAAG,OAAO,CAAC,UAAU,IAAI,2BAAc,CAAC;AACjD,YAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,iBAAE,MAAM,CAAC;AACzC,YAAI,CAAC,UAAU,GAAG,UAAU,CAAC;KAChC;;AAED,kBAAc,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE;AACjC,eAAO,OAAO,CAAC,IAAI,CAAC,MAAM,sBAAS,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KACvF;;AAED,gBAAY,CAAC,QAAQ,EAAE,IAAI,EAAE;AACzB,eAAO,OAAO,CAAC,IAAI,CAAC,MAAM,sBAAS,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KAC/E;;AAED,iBAAa,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC1B,eAAO,OAAO,CAAC,IAAI,CAAC,MAAM,sBAAS,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;KAClF;;AAED,eAAW,CAAC,QAAQ,EAAE;AAClB,eAAO,OAAO,CAAC,IAAI,CAAC,MAAM,sBAAS,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;KAC1E;CACJ;;kBAEc,GAAG","file":"index.js","sourcesContent":["import _ from 'lodash';\r\nimport Template from './src/Template';\r\nimport NodeFilesystem from './src/NodeFilesystem';\r\nimport NodePath from './src/NodePath';\r\nimport semver from 'semver';\r\n\r\nconst supportES5 = semver.lt(process.versions.node, '4.0.0');\r\nconst preload = supportES5 ? Promise.resolve(require('babel-core/polyfill')) : Promise.resolve();\r\n\r\nclass Arc {\r\n    constructor(options) {\r\n        options = options || {};\r\n        this.filesystem = options.filesystem || new NodeFilesystem();\r\n        this.path = options.pathsystem || new NodePath();\r\n        this.escape = options.escape || _.escape;\r\n        this.supportES5 = supportES5;\r\n    }\r\n\r\n    evaluateString(text, data, filename) {\r\n        return preload.then(() => Template.fromString(this, text, filename).evaluate(data));\r\n    }\r\n\r\n    evaluateFile(filename, data) {\r\n        return preload.then(() => Template.fromFile(this, filename).evaluate(data));\r\n    }\r\n\r\n    compileString(text, filename) {\r\n        return preload.then(() => Template.fromString(this, text, filename).compile());\r\n    }\r\n\r\n    compileFile(filename) {\r\n        return preload.then(() => Template.fromFile(this, filename).compile());\r\n    }\r\n}\r\n\r\nexport default Arc;"],"sourceRoot":"/source/"}